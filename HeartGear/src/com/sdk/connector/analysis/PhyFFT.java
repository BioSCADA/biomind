/*
 * 
 fft transforms a real-valued time series (from the specified input-file, or from the standard input if input-file is specified as ‘‘-’’; input-file must be in text form) into a frequency spectrum (on the standard output). Using appropriate options, fft can produce polar or rectangular format amplitude spectra, or power spectra, or it can perform an inverse FFT to transform a polar or rectangular format amplitude spectrum into a time series. The input series may be corrected if it has a non-zero mean amplitude or first derivative (by ‘zero-meaning’ or ‘detrending’ the input series). Output spectra may be smoothed in several different ways.

By default, the standard output is the magnitude of the discrete Fourier transform of the input series, normalized such that the mean of the squares of the inputs is equal to the sum of the squares of the outputs (i.e., the RMS power determined from the time series equals the total power determined from the spectrum; this normalization is correct only if the input series has a mean value of zero).

Options are:

-c
    Output unnormalized complex FFT (real components in first column, imaginary components in second column).
-f frequency
    Show the center frequency for each bin in the first column. The frequency argument specifies the input sampling frequency; the center frequencies are given in the same units.
-h
    Print a usage summary.
-i
    Perform inverse FFT; in this case, the standard input should be in the form generated by fft -c, and the standard output is a series of samples. No other options may be used with -i.
-I
    Perform inverse FFT as above, but using input generated by fft -p. No other options may be used with -I.
-l n
    Perform up to n-point transforms. fft rounds n up to the next higher power of two unless n is already a power of two. If the input series contains fewer than n samples, it is padded with zeros up to the next higher power of two. Any additional input samples beyond the first n are not read. Default: n = 16384.
-n n
    Process the input in overlapping chunks of n samples and output an averaged spectrum. If used in combination with -P, the output is the average of the individual squared magnitudes; otherwise, the output is derived from the averages of the real components and of the imaginary components taken separately. For best results, n should be a power of two.
-N n
    Process the input in overlapping chunks of n samples and output a spectrum for each chunk. Successive spectra are concatenated in the output. Only one of -n and -N may be used at a time. For best results, n should be a power of two.
-p
    Show the phase in radians in the last column.
-P
    Generate a power spectrum (print squared magnitudes).
-s n
    Smooth the output by applying an n-point moving average to each bin. This option does not change the number of bins.
-S n
    Smooth the output by summing sets of n consecutive bins. This option reduces the number of bins by a factor of n.
-w window-type
    Apply the specified window to the input data. window-type may be one of: ‘Bartlett’, ‘Blackman’, ‘Blackman-Harris’, ‘Hamming’, ‘Hanning’, ‘Parzen’, ‘Square’, and ‘Welch’. The ‘Square’ window type is equivalent to using no window at all; this is also variously known as a rectangular or Dirichlet window.
-z
    Add a constant to each input sample, chosen such that the mean value of the entire series is zero.
-Z
    Set the mean value of the inputs to zero as for -z, and detrend the series (set its mean first derivative to zero). This is equivalent to subtracting a best-fit (by least squares) line from the input data.
 */

package com.sdk.connector.analysis;


/* file: fft.c		G. Moody	24 February 1988
		   Last revised:	27 October 2008

-------------------------------------------------------------------------------
fft: Fast Fourier transform of real data
Copyright (C) 1988-2005 George B. Moody

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.

You may contact the author by e-mail (george@mit.edu) or postal mail
(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,
please visit PhysioNet (http://www.physionet.org/).
_______________________________________________________________________________

The default input to this program is a text file containing a uniformly sampled
time series, presented as a column of numbers.  The default standard output is
the magnitude of the discrete Fourier transform of the input series, normalized
by the length of the FFT.

The functions `realft' and `four1' are based on those in Press, W.H., et al.,
Numerical Recipes in C: the Art of Scientific Computing (Cambridge Univ. Press,
1989;  2nd ed., 1992).
*/
/*
 * @copyright Copyright (c) 2010 Laboratório de Educação Cerebral. (http://www.educacaocerebral.com.br)
 *
 * This file is part of SoftVFC.
 *
 * SoftVFC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SoftVFC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SoftVFC.  If not, see <http://www.gnu.org/licenses/>.
 *
 * *********************
 *
 * Este arquivo é parte do programa SoftVFC.
 *
 * SoftVFC é um software livre; você pode redistribui-lo e/ou
 * modifica-lo dentro dos termos da Licença Pública Geral GNU como
 * publicada pela Fundação do Software Livre (FSF); na versão 3 da
 * Licença.
 *
 * Este programa é distribuido na esperança que possa ser util,
 * mas SEM NENHUMA GARANTIA; sem uma garantia implicita de ADEQUAÇÂO a qualquer
 * MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
 * Licença Pública Geral GNU para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa, se não, acesse no website oficial:
 * http://www.gnu.org/licenses/gpl.html
 *
 */
/**
 *
 * @author Diego Schmaedech Martins (schmaedech@gmail.com)
 * @version 29/07/2010
 */

public final class PhyFFT{

public static void main(String arg[]){
     // double[] rr1000 = {0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f,0.731f,0.732f,0.735f,0.738f,0.75f,0.758f,0.76f,0.757f,0.746f,0.738f,0.744f,0.832f,0.914f,0.847f,0.692f,0.605f,0.63f,0.683f,0.711f,0.712f,0.726f,0.738f,0.759f,0.76f,0.766f,0.773f,0.776f,0.759f,0.73f,0.718f,0.72f,0.706f,0.698f,0.712f,0.728f,0.731f,0.73f,0.726f,0.725f,0.729f,0.731f,0.742f,0.752f,0.753f,0.755f,0.759f,0.76f,0.75f,0.735f,0.725f,0.723f,0.71f,0.692f,0.704f,0.724f,0.731f,0.736f,0.751f,0.76f,0.761f,0.768f,0.776f,0.769f,0.761f,0.76f,0.752f,0.741f,0.738f,0.737f,0.73f,0.725f,0.725f,0.718f,0.711f,0.721f,0.739f,0.746f,0.75f,0.76f,0.768f,0.766f,0.759f,0.753f,0.757f,0.76f,0.732f,0.701f,0.698f,0.701f,0.708f,0.711f,0.712f,0.722f,0.731f,0.737f,0.744f,0.746f,0.737f,0.723f,0.718f,0.723f,0.744f,0.76f,0.747f,0.732f,0.731f,0.725f,0.715f,0.711f,0.707f,0.691f,0.68f,0.699f,0.725f,0.731f,0.748f,0.758f,0.768f,0.765f,0.758f,0.753f,0.758f,0.748f,0.738f,0.745f,0.752f,0.753f,0.74f,0.723f,0.718f,0.725f,0.731f,0.734f,0.738f,0.744f,0.755f,0.76f,0.762f,0.766f,0.768f,0.766f,0.754f,0.746f,0.728f,0.711f,0.713f,0.717f,0.718f,0.719f,0.722f,0.725f,0.738f,0.745f,0.746f,0.754f,0.765f,0.788f,0.763f,0.756f,0.753f,0.756f,0.764f,0.768f,0.767f,0.768f,0.76f,0.756f,0.709f,0.711f,0.715f,0.725f,0.731f,0.732f,0.747f,0.76f,0.764f,0.768f,0.778f,0.761f,0.76f,0.754f,0.743f,0.738f,0.733f,0.72f,0.711f};

   //
     double[] rr = {0.737825,0.677750,0.705000,0.708925,0.754275,0.796625,0.801625,0.801550,0.792900,0.792350,0.800775,0.728450,0.702175,0.654050,0.659250,0.686500,0.695875,0.796475,0.828950,0.815475,0.790125,0.784475,0.783325,0.765225,0.761650,0.778975,0.849900,0.903050,0.861950,0.852125,0.879775,0.844100,0.805125,0.806925,0.797675,0.791750,0.768175,0.830600,0.889950,0.855025,0.816025,0.850225,0.909450,0.914100,0.857400,0.863500,0.822375,0.793825,0.783075,0.824975,0.855050,0.847775,0.850975,0.859875,0.854700,0.841200,0.868475,0.876750,0.846450,0.863925,0.803025,0.793700,0.753950,0.698300,0.710875,0.750475,0.717350,0.779350,0.845700,0.868025,0.857350,0.800825,0.749750,0.770225,0.755175,0.738025,0.775375,0.789550,0.809275,0.809250,0.828950,0.791150,0.717950,0.728275,0.739750,0.740875,0.818625,0.830650,0.796400,0.828550,0.831075,0.796050,0.776825,0.771775,0.820250,0.797700,0.827500,0.852900,0.872225,0.899150,0.897925,0.838950,0.831900,0.855150,0.804750,0.723900,0.687700,0.688275,0.696475,0.688650,0.753000,0.946875,0.876650,0.827925,0.827325,0.771900,0.785100,0.785500,0.743375,0.788225,0.799975,0.806900,0.851275,0.848250,0.798450,0.793525,0.826800,0.800600,0.799925,0.844250,0.852950,0.792025,0.739325,0.678600,0.693000,0.724225,0.749000,0.845375,0.879350,0.815700,0.800325,0.798400,0.750475,0.724675,0.758675,0.809275,0.797650,0.807250,0.896900,0.873850,0.809900,0.762925,0.811125,0.835975,0.813575,0.802750,0.863650,0.869925,0.796125,0.824350,0.851125,0.818750,0.793950,0.859825,0.852425,0.813600,0.872650,0.912975,0.818375,0.806850,0.820550,0.785450,0.765425,0.793300,0.778475,0.757050,0.711200,0.759450,0.765400,0.794375,0.884425,0.842300,0.796350,0.792125,0.804525,0.756450,0.706250,0.672400,0.691075,0.722600,0.703850,0.770275,0.833275,0.835900,0.814975,0.835950,0.780725,0.770625,0.775900,0.770100,0.730200,0.732525,0.776975,0.781150,0.773875,0.826750,0.809675,0.813300,0.822550,0.788975,0.765825,0.792150,0.795975,0.799925,0.875050,0.907425,0.852725,0.816250,0.810675,0.817650,0.787400,0.752850,0.752400,0.820700,0.878825,0.903025,0.871175,0.890725,0.877350,0.820225,0.826100,0.842250,0.819500,0.837575,0.881150,0.840150,0.833000,0.865125,0.853325,0.814475,0.843475,0.842150,0.813075,0.790175,0.732725,0.741450,0.793325,0.783075,0.796225,0.865475,0.860325,0.811500,0.813800,0.824150,0.798075,0.778725,0.798075,0.802975,0.784875,0.776450,0.805400,0.798075,0.767825,0.794150,0.801600,0.770725,0.739675,0.764825,0.807100,0.779200,0.767975,0.802200,0.820200,0.785500,0.808825,0.735375,0.695850,0.699875,0.719775,0.765700,0.808900,0.796075,0.785100,0.826725,0.815475,0.800200,0.829400,0.820000,0.786900,0.818375,0.821975,0.803550,0.834425,0.811375,0.749725,0.720800,0.727925,0.759375,0.756650,0.774300,0.861650,0.854750,0.829275,0.811400,0.742325,0.724775,0.741075,0.729625,0.787875,0.806650,0.780875,0.743700,0.807025,0.798625,0.764275,0.738425,0.765775,0.776850,0.747775,0.730400,0.782825,0.813825,0.833350,0.774075,0.791775,0.845950,0.868850,0.843600,0.763525,0.730975,0.712625,0.757025,0.793950,0.774225,0.813650,0.907450,0.880625,0.849075,0.863325,0.866450,0.806300,0.774625,0.789200,0.785400,0.770000,0.782675,0.803125,0.798350,0.802950,0.852800,0.876900,0.818075,0.814875,0.810050,0.771850,0.748575,0.756550,0.754175,0.767350,0.763875,0.809400,0.859900,0.852300,0.820375,0.828650,0.856925,0.835425,0.793550,0.801000,0.826425,0.806775,0.794550,0.824450,0.833400,0.813400,0.800575,0.835000,0.833400,0.796225,0.815475,0.769600,0.709375,0.678125,0.667625,0.691275,0.772325,0.852275,0.822500,0.807275,0.865350,0.868825,0.831075,0.830550,0.833250,0.794050,0.765575,0.782950,0.798300,0.765550,0.774100,0.860425,0.899875,0.831175,0.797900,0.781075,0.763200,0.715825,0.666700,0.657525,0.702175,0.706550,0.696125,0.706000,0.966450,0.915900,0.857325,0.844425,0.802100,0.728700,0.718425,0.743225,0.743200,0.781175,0.841450,0.826800,0.798875,0.858950,0.863875,0.813550,0.822025,0.834900,0.811625,0.778525,0.800850,0.748200,0.709050,0.680075,0.672175,0.688725,0.761650,0.860525,0.811750,0.794400,0.819925,0.827000,0.785025,0.769925,0.800300,0.783375,0.761250,0.743425,0.804975,0.796300,0.758800,0.774575,0.784975,0.795800,0.770600,0.819600,0.829000,0.804900,0.800950,0.827875,0.770250,0.764150,0.782375,0.755125,0.756250,0.804975,0.785275,0.831325,0.844000,0.793700,0.822250,0.826650,0.790425,0.762200,0.776675,0.742000,0.730225,0.740050,0.754000,0.732925,0.765825,0.843925,0.807800,0.801675,0.875325,0.858550,0.813800,0.809150,0.765800,0.738875,0.752975,0.764200,0.721600,0.744025,0.786600,0.794150,0.767625,0.804825,0.826850,0.806825,0.778950,0.804950,0.774200,0.760725,0.764275,0.751900,0.730725,0.754650,0.754650};
     //double[] rrRemoved = Statistics.removeConsecutivesEquals(rr);

     double[] rrResampled = Statistics.resampleWindow(null, rr, rr.length, 4);
    //./fft -f 1 -P -w Welch -Z - ecg01.tach.txt
    long init_time = System.currentTimeMillis();

    for(int i = 0; i < rr.length; i++){
        //System.out.println("rr\t" + rr[i] + "\trre\t" +rrResampled[i] );
    }

    System.out.println("rr lenght: " + rr.length);
    System.out.println("rr resampled: " + rrResampled.length);
    System.out.println("total time: " + (System.currentTimeMillis() - init_time));
    /*(K-1)D+L = N*/
    PhyFFT fFT = new PhyFFT(rr, 1/*freq*/, 1024/*samples*/, 0/*K*/, 256/*L*/, 128/*D*/, false, 1/*smooth*/, 1/*decimation*/, "Welch", true, true);
}

    int N = 16384;	/* maximum points in FFT */

    double rsum;
    int m, n, i;

    int decimation = 1;

    int samples = N;
    int nflag;
    int Nflag = 1;
    int nchunks;
    boolean plotPower = false;

    int smooth = 1;

    boolean detrend = false;
    boolean zeromean = false;
    double[] c;
    double freq, fstep, norm;
    String window;
    double[] input;
    private double[] frequency;
    private double[] power;
    private double[] phase;
    int chuncks;

public PhyFFT(double[] input, int freq , int samples, int K, int L, int D, boolean plotPower, int smooth, int decimation, String win, boolean zeromean, boolean detrend){


    this.input = input;

    this.freq = freq;


    this.samples = samples;
    this.nflag = K;

    this.plotPower = plotPower;
    this.smooth = smooth;
    this.decimation = decimation;

    this.zeromean = zeromean;
    this.detrend = detrend;

    this.window = win;


    decimation = smooth;

   // System.out.println("this.input.length: " + this.input.length);

    input();

    if (nflag == 0) {		/* calculate and print inverse FFT */
	  fft();
          output();
    } else {			/* calculate and print forward FFT */
        double[] s = new double[c.length];
        for(int k = 0; k < K; k++){
            for (int z = 0; z < c.length; z+=2){
                c[z] = 0;//initialize c
                c[z+1] = 0;//initialize c
            }
            //this.input = new double[input.length];
           // System.out.println(" u : " +  u);
            for(int j = 0; j < L; j++){//2/*K*/, 256/*L*/, 128/*D*/
                if(k==0){
                    c[j] = input[(j)];
                   // System.out.println("j: " + j + "\t u: "+ c[j]);
                }else if(k == 1){
                    c[j] = input[(j + D)];
                   // System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);
                }else{
                    c[j] = input[(j + (K-1)*D)];
                   // System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);
                }
                
            }
            if(Nflag == 0){
                fft();
                output();
            }
            if(plotPower){
                for(int j = 0; j < L; j++){
                    s[j] +=  c[j]*c[j] ;
                }
            }else{
                for(int j = 0; j < L; j++){
                    s[j] +=  c[j];
                }
            }
           // System.out.println();
        }

         if(Nflag > 0){
            for (int z = 0; z < c.length; z++){
                c[z] = 0;//initialize c
            }
            if(plotPower){
                for(int j = 0; j < L; j++){
                    if(s[j] != 0){
                        c[j] = Math.sqrt(s[j])/nflag;
                    }
                }
            }else{
                for(int j = 0; j < L; j++){
                     if(s[j] != 0){
                        c[j] = s[j]/nflag;
                     }
                }
            }
            fft();
            output();
        }

       

    }
}

    void input(){
         /* Make sure that samples is a power of two. */
        m = N;
        if (this.samples <= N) {
            if(this.samples == 0)
                this.samples = input.length;

            while(m >= this.samples){
                m >>= 1;
            }
            m <<= 1;
        }else {
            while(m < this.samples){
                m <<= 1;
            }
        }
       // System.out.println( "m \t" + m);
        this.samples = m;
        c = new double[m+2];
        for (n = 0; n < c.length; n++){
            c[n] = 0;//initialize c
        }
        for (n = 0; n < input.length && n < samples; n++){
            try{
               c[n]=input[n];
            }catch(Exception ex){
               System.out.println(ex.getMessage());
            }
        }
    }

    void fft(){		/* calculate forward FFT */


        if (zeromean) {		/* zero-mean the input array */
            Statistics.zeromean(c, n);
        }
        if (detrend){
           Statistics.detrend(c, n);
        }
       // System.out.println( "samples \t" + samples);
        for (m = samples; m >= n; m >>= 1) {}
        m <<= 1;		/* m is now the smallest power of 2 >= n; this is the
                               length of the input series (including padding) */
       // System.out.println( "m \t" + m);
        double wsum = 0;
        if (!window.equals("")){			/* apply the chosen windowing function */
            wsum = Windows.apply(c, m, window);
        } else{
            wsum = m;
        }

        //System.out.println("wsum: "+ wsum);
        norm =  Math.sqrt(2.0/(wsum*n));
        //System.out.println("norm: "+ norm);

        fstep =  (freq / (2. * m));


       // System.out.println("fstep: "+ fstep);

        double[] pack = new double[c.length];
        pack[0] = 0;
        for(int p = 1; p< c.length-1;p++){
            pack[p] = c[p-1];
        }

        FrequencyDomain.realft(pack, m/2, 1);	/* perform the FFT;  see Numerical Recipes */

        for(int p = 0; p< pack.length-1;p++){
            c[p] = pack[p+1];
        }
    }

    void output() {/* print the FFT */
   

    c[m] = c[1];		/* unpack the output array */
    c[1] = c[m+1] = 0f;

    frequency = new double[c.length];
    power = new double[c.length];

    phase = new double[c.length];
    for (i = 0; i <= m; i += 2*decimation) {
	int j;
	double pow;

	//if (fflag==1)
            //System.out.print( i*fstep +"\t");
        frequency[i] = i*fstep;

//	if (cflag==1){
//            try{
//                //System.out.println( c[i]+" \t"+c[i+1]);
//            }catch(Exception ex){
//                System.out.println(ex.getMessage());
//            }
//        }
//	else {
	    for (j = 0, pow = 0.0; j < 2*smooth; j += 2){

                try{
                    pow += (c[i+j]*c[i+j] + c[i+j+1]*c[i+j+1]) *norm*norm;
                }catch(Exception ex){
                    System.out.println(ex.getMessage());
                }

            }
	    pow /= smooth/decimation;
	    if(plotPower){
                //System.out.print(pow/(freq/2));
                power[i] = pow/(freq/2);
            } else{
                //System.out.print(Math.sqrt(pow)/(freq/2)+"\t");
                power[i] = Math.sqrt(pow)/(freq/2);
            }
	    if (false){
                try{
                    //System.out.print( Math.atan2(c[i+1], c[i])+"\t");
                    phase[i] = Math.atan2(c[i+1], c[i]);
                }catch(Exception ex){
                    System.out.println(ex.getMessage());
                }

            }
	    //System.out.println();
	//}
    }
}

    /**
     * @return the frequency
     */
    public double[] getFrequency() {
        return frequency;
    }

    /**
     * @return the power
     */
    public double[] getPower() {
        return power;
    }
 
    /**
     * @return the phase
     */
    public double[] getPhase() {
        return phase;
    }
 
}
