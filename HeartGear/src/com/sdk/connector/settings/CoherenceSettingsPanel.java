/*
 * @copyright Copyright (c) 2010 Laboratório de Educação Cerebral. (http://www.educacaocerebral.com.br)
 *
 * This file is part of SoftVFC.
 *
 * SoftVFC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SoftVFC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SoftVFC.  If not, see <http://www.gnu.org/licenses/>.
 *
 * *********************
 *
 * Este arquivo é parte do programa SoftVFC.
 *
 * SoftVFC é um software livre; você pode redistribui-lo e/ou
 * modifica-lo dentro dos termos da Licença Pública Geral GNU como
 * publicada pela Fundação do Software Livre (FSF); na versão 3 da
 * Licença.
 *
 * Este programa é distribuido na esperança que possa ser util,
 * mas SEM NENHUMA GARANTIA; sem uma garantia implicita de ADEQUAÇÂO a qualquer
 * MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
 * Licença Pública Geral GNU para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa, se não, acesse no website oficial:
 * http://www.gnu.org/licenses/gpl.html
 *
 */
/**
 *
 * @author Diego Schmaedech Martins (schmaedech@gmail.com)
 * @version 29/07/2010
 */


package com.sdk.connector.settings;

/**
 *
 * @author diego
 */
public class CoherenceSettingsPanel extends javax.swing.JPanel {

    private static CoherenceSettingsEntity coerenceSettingsEntity = new CoherenceSettingsEntity();

    /**
     * @return the fftSettingsEntity
     */
    public static CoherenceSettingsEntity getCoerenceSettingsEntity() {
        return coerenceSettingsEntity;
    }
    /** Creates new form CoherenceSettingsPanel */
    public CoherenceSettingsPanel() {
        initComponents();
        buttonGroup1.add(flagPowerBased);
        buttonGroup1.add(flagPeakBased);
        setEditable(false);
        updateFields();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        flagPeakBased = new javax.swing.JRadioButton();
        flagPowerBased = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfPowerMin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfPowerMax = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtfIntegratedWindow = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jtfRangeMin = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfRangeMax = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        flagShowFFT = new javax.swing.JCheckBox();
        flagShowAR = new javax.swing.JCheckBox();
        flagShowLomb = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jtfPlotPoints = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jbEdit = new javax.swing.JButton();
        jbUpdate = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pre-processing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 10))); // NOI18N
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(540, 80));
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel6.setOpaque(false);
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        flagPeakBased.setBackground(new java.awt.Color(255, 255, 255));
        flagPeakBased.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sdk/connector/settings/Bundle"); // NOI18N
        flagPeakBased.setText(bundle.getString("PEAK BASED")); // NOI18N
        jPanel6.add(flagPeakBased);

        flagPowerBased.setBackground(new java.awt.Color(255, 255, 255));
        flagPowerBased.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        flagPowerBased.setSelected(true);
        flagPowerBased.setText(bundle.getString("POWER BASED")); // NOI18N
        jPanel6.add(flagPowerBased);

        jPanel5.add(jPanel6);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Params", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 10))); // NOI18N
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(540, 140));
        jPanel1.setLayout(new java.awt.GridLayout(3, 0));

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText(bundle.getString("TOTAL POWER(HZ):")); // NOI18N
        jPanel4.add(jLabel1);

        jtfPowerMin.setColumns(5);
        jtfPowerMin.setText("0.04");
        jPanel4.add(jtfPowerMin);

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel2.setText(":");
        jPanel4.add(jLabel2);

        jtfPowerMax.setColumns(5);
        jtfPowerMax.setText("0.26");
        jPanel4.add(jtfPowerMax);

        jPanel1.add(jPanel4);

        jPanel7.setOpaque(false);
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel3.setText(bundle.getString("INTEGRATED WINDOW(HZ):")); // NOI18N
        jPanel7.add(jLabel3);

        jtfIntegratedWindow.setColumns(5);
        jtfIntegratedWindow.setText("0.015");
        jPanel7.add(jtfIntegratedWindow);

        jPanel1.add(jPanel7);

        jPanel8.setOpaque(false);
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel4.setText(bundle.getString("COHERENCE RANGE(HZ):")); // NOI18N
        jPanel8.add(jLabel4);

        jtfRangeMin.setColumns(5);
        jtfRangeMin.setText("0.0033");
        jPanel8.add(jtfRangeMin);

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel5.setText(":");
        jPanel8.add(jLabel5);

        jtfRangeMax.setColumns(5);
        jtfRangeMax.setText("0.4");
        jPanel8.add(jtfRangeMax);

        jPanel1.add(jPanel8);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 10))); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(540, 120));
        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        flagShowFFT.setBackground(new java.awt.Color(255, 255, 255));
        flagShowFFT.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        flagShowFFT.setSelected(true);
        flagShowFFT.setText(bundle.getString("FFT BASED")); // NOI18N
        jPanel3.add(flagShowFFT);

        flagShowAR.setBackground(new java.awt.Color(255, 255, 255));
        flagShowAR.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        flagShowAR.setText(bundle.getString("AR BASED")); // NOI18N
        jPanel3.add(flagShowAR);

        flagShowLomb.setBackground(new java.awt.Color(255, 255, 255));
        flagShowLomb.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        flagShowLomb.setText(bundle.getString("LOMB BASED")); // NOI18N
        jPanel3.add(flagShowLomb);

        jPanel2.add(jPanel3);

        jPanel9.setOpaque(false);
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel6.setText(bundle.getString("PLOT POINTS:")); // NOI18N
        jPanel9.add(jLabel6);

        jtfPlotPoints.setColumns(5);
        jtfPlotPoints.setText("128");
        jPanel9.add(jtfPlotPoints);

        jPanel2.add(jPanel9);

        jPanel11.setOpaque(false);
        jPanel11.setPreferredSize(new java.awt.Dimension(540, 37));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbEdit.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jbEdit.setText(bundle.getString("EDIT")); // NOI18N
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });
        jPanel11.add(jbEdit);

        jbUpdate.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jbUpdate.setText(bundle.getString("UPDATE")); // NOI18N
        jbUpdate.setEnabled(false);
        jbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateActionPerformed(evt);
            }
        });
        jPanel11.add(jbUpdate);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditActionPerformed
        setEditable(true);
        jbUpdate.setEnabled(true);
        jbEdit.setEnabled(false);
         repaint();
}//GEN-LAST:event_jbEditActionPerformed

    private void jbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateActionPerformed
        updateFields();
        jbUpdate.setEnabled(false);

        jbEdit.setEnabled(true);
        setEditable(false);
}//GEN-LAST:event_jbUpdateActionPerformed

    private void updateFields(){

        if(flagPowerBased.isSelected()){
            getCoerenceSettingsEntity().setPlotPowerBased(true);
        }else{
            getCoerenceSettingsEntity().setPlotPowerBased(false);
        }

        getCoerenceSettingsEntity().setShowFFT(flagShowFFT.isSelected());
        getCoerenceSettingsEntity().setShowMemse(flagShowAR.isSelected());
        getCoerenceSettingsEntity().setShowLomb(flagShowLomb.isSelected());
        getCoerenceSettingsEntity().setPlotPoints(Integer.parseInt(jtfPlotPoints.getText()));
        getCoerenceSettingsEntity().setCoerenceRangeMax(Double.parseDouble(jtfRangeMax.getText()));
        getCoerenceSettingsEntity().setCoerenceRangeMin(Double.parseDouble(jtfRangeMin.getText()));
        getCoerenceSettingsEntity().setIntegratedWindow(Double.parseDouble(jtfIntegratedWindow.getText()));
        getCoerenceSettingsEntity().setTotalPowerMax(Double.parseDouble(jtfPowerMax.getText()));
        getCoerenceSettingsEntity().setTotalPowerMin(Double.parseDouble(jtfPowerMin.getText()));

    }

    private void setEditable(boolean flag){
        flagPeakBased.setEnabled(flag);
        flagPowerBased.setEnabled(flag);
        flagShowAR.setEnabled(flag);
        flagShowFFT.setEnabled(flag);
        flagShowLomb.setEnabled(flag);
        jLabel1.setEnabled(flag);
        jLabel2.setEnabled(flag);
        jLabel3.setEnabled(flag);
        jLabel4.setEnabled(flag);
        jLabel5.setEnabled(flag);
        jLabel6.setEnabled(flag);
        jPanel1.setEnabled(flag);
        jPanel11.setEnabled(flag);
        jPanel2.setEnabled(flag);
        jPanel3.setEnabled(flag);
        jPanel4.setEnabled(flag);
        jPanel5.setEnabled(flag);
        jPanel6.setEnabled(flag);
        jPanel7.setEnabled(flag);
        jPanel8.setEnabled(flag);

        jtfPlotPoints.setEnabled(flag);
        jtfIntegratedWindow.setEnabled(flag);
        jtfPowerMax.setEnabled(flag);
        jtfPowerMin.setEnabled(flag);
        jtfRangeMax.setEnabled(flag);
        jtfRangeMin.setEnabled(flag);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton flagPeakBased;
    private javax.swing.JRadioButton flagPowerBased;
    private javax.swing.JCheckBox flagShowAR;
    private javax.swing.JCheckBox flagShowFFT;
    private javax.swing.JCheckBox flagShowLomb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JTextField jtfIntegratedWindow;
    private javax.swing.JTextField jtfPlotPoints;
    private javax.swing.JTextField jtfPowerMax;
    private javax.swing.JTextField jtfPowerMin;
    private javax.swing.JTextField jtfRangeMax;
    private javax.swing.JTextField jtfRangeMin;
    // End of variables declaration//GEN-END:variables

}
